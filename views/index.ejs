<!doctype html>
<html lang="en">
<head>
  <title>Document</title>
  <link rel="stylesheet" href="style.css">
</head>
<body>
  <div>
    Video: <select id="camera"></select>
  </div>
  <p>
    <button id="takeProfilePicture" type="button" autofocus="true">Create Profile Picture</button>
  </p>
  <video id="videoTag" autoplay></video>
  <canvas id="profilePicCanvas" style="display: none;"></canvas>
  <div><img src="" alt="" id="profilePictureOutput"></div>
  <script>
    var videoArea = document.querySelector("video");
    var videoSelect = document.querySelector("#camera");
    var profilePicCanvas = document.querySelector("#profilePicCanvas");
    var profilePictureOutput = document.querySelector("#profilePictureOutput");
    var takePicButton = document.querySelector("#takeProfilePicture");
    var videoTag = document.querySelector("#videoTag");


    var width = 240;
    var height = 0;
    var streaming = false;

    takePicButton.addEventListener('click', function(ev) {
      takeProfilePic();
      ev.preventDefault();
    }, false);

    videoTag.addEventListener('canplay', function(ev) {
      if (!streaming) {
        height = videoTag.videoHeight / (videoTag.videoWidth/width);
        if (isNaN(height)) {
          height = width / (4/3);
        }

        videoTag.setAttribute('width', width);
        videoTag.setAttribute('height', height);
        profilePicCanvas.setAttribute('width', width);
        profilePicCanvas.setAttribute('height', height);
        streaming = true;
      }
    }, false)

    function takeProfilePic() {
      var context = profilePicCanvas.getContext('2d');
      if (width && height) {
        profilePicCanvas.width = width;
        profilePicCanvas.height = height;
        context.drawImage(videoTag, 0, 0, width, height);

        var data = profilePicCanvas.toDataURL('image/png');
        profilePictureOutput.setAttribute('src', data);

      }
    }

    // Mediastreamtrack.getsources is no longer supported
    // instead, we use mediaDevices.enumerateDevices to get mic, camera, audio devices
    navigator.mediaDevices.enumerateDevices()
            .then(function(devices) {
                appendCameras(devices);
            })
    .catch(function(error) {
      console.log(error);
    });

    videoSelect.onchange = startStream;

    startStream();

    function appendCameras(sourceInfos) {
      for (var i = 0; i !== sourceInfos.length; i++) {
        var sourceInfo = sourceInfos[i];
        var option = document.createElement('option');
        option.value = sourceInfo.id;
        if (sourceInfo.kind == 'videoinput') {
          option.text = sourceInfo.label || 'camera' + (videoSelect.length + 1);
          videoSelect.appendChild(option);
        }
      }
    }
    function startStream() {
      var videoSource = videoSelect.value;
      var constrains = {audio: false,
        video: {
          mandatory: {
            minWidth: 240,
            maxWidth: 240,
            minHeight: 240,
            maxHeight: 240
          },
            // this is needed for apply which video refer to
          optional: [
            {
              sourceId: videoSource
            }
          ]
        }};
      navigator.mediaDevices.getUserMedia(constrains)
      .then(onSuccess)
      .catch(onError);

    }

    function onSuccess(stream) {
      console.log("success!, we have a stream");
      videoArea.srcObject = stream;
      videoArea.className = "grayscale_filter";
      videoArea.play();
    }

    function onError(error) {
      console.log("error", error);
    }


  </script>
</body>
</html>